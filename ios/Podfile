platform :ios, '13.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', 'Debug' => :debug, 'Profile' => :release, 'Release' => :release

# Directorio donde vive este Podfile (la carpeta ios)
flutter_application_path = __dir__

# Obtiene FLUTTER_ROOT leyendo Generated.xcconfig dentro de ios/Flutter
def flutter_root
  xcconfig = File.expand_path(File.join(flutter_application_path, 'Flutter', 'Generated.xcconfig'))
  unless File.exist?(xcconfig)
    raise "#{xcconfig} no existe. Ejecuta 'flutter pub get' primero dentro de ios/."
  end
  File.foreach(xcconfig) do |line|
    if line =~ /FLUTTER_ROOT\=(.*)/
      return $1.strip
    end
  end
  raise "No se encontró FLUTTER_ROOT en #{xcconfig}."
end

# Carga el script de integración de CocoaPods de Flutter
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

# Ajustes iniciales de Flutter para iOS
flutter_ios_podfile_setup

target 'Runner' do
  # Usa frameworks estáticos (requerido por Firebase y plugins Swift)
  use_frameworks! :linkage => :static

  # Instala todos los pods de Flutter y de los plugins
  flutter_install_all_ios_pods(flutter_application_path)
end

post_install do |installer|
  # Aplica los ajustes de Flutter (equivalente a flutter_post_install)
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    # Desactiva la generación de interfaces de módulo Swift
    target.build_configurations.each do |config|
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'
    end
  end
end
